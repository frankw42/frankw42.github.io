{"version":3,"sources":["demo/core.cljs"],"mappings":"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","names":["js/demo","js/demo.core","js/demo.core.state","demo.core/state","cljs.core.atom","demo.core/time-str","js/Date","demo.core/moveAudioControls","el","js/document","demo.core/incrmentStackIndex","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","cljs.core/assoc","demo.core/generate-json","img-nodes","cljs.core.array_seq","images-list","cljs.core.map_indexed","i","audio-wrapper","audio-el","audio-url","now-str","cljs.core/List","js/JSON.stringify","cljs.core/clj->js","demo.core/download-json!","filename","json-str","blob","js/Blob","url","js/URL","a","demo.core/flipBookImages?","container","num-children","demo.core/flipBookImageCount","demo.core/not-covered?","rect","x","y","demo.core/addTrashCan","wrapper-div","trash-img","e","parent","id","textField","js/console.log","node-list","images","cljs.core/vec","n","cljs.core/count","cljs.core._EQ_","found","p1__17321#","cljs.core/some","temp__5823__auto__","demo.core/restore-from-json","event","file","reader","js/FileReader","data","cljs.core.js__GT_clj","js/JSON","trackName","artistName","image-stack","seq__17322","cljs.core/seq","chunk__17323","count__17324","i__17325","map__17328","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunked-seq?","c__5548__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__17329","cljs.core/first","cljs.core/next","img-el","G__17330","G__17331","G__17332","demo.core/play-jamendo-audio","demo.core/$","js/jQuery","demo.core/images","demo.core/tiltImages","demo.core/background-image","demo.core/show-image","image-list","idx","js/d3","cljs.core/identity","d","demo.core/cycle-owl-blink-images","frame-count","interval-ms","js/setTimeout","next-frame","demo.core/cycle-owl-tilt-images","demo.core/cached-blink-images","cljs.core.mapv","img","js/Image","demo.core/cached-tilt-images","demo.core/tiltImag","demo.core/es","js/demo.core.background-imageOnce","demo.core/background-imageOnce","demo.core/Ashow-image","cljs.core.nth","demo.core/cycle-owl-images","cachedImages","step","track-name","artist-name","seq__17333","chunk__17334","count__17335","i__17336","seq__17337","chunk__17338","count__17339","i__17340","audio-wrap","play-promise","err","js/console.warn","info-el","demo.core/play-random-jamendo-track","query","client-id","audioformat","js/encodeURIComponent","js/fetch","p1__17341#","clj-data","tracks","nth-track","cljs.core/rand-int","js/alert","js/console.error","demo.core/image-choices","demo.core/music-choices","demo.core/init-jqxImageQuery","jq","cljs.core.js_invoke","args","val","cljs.core.not_EQ_","demo.core/device-type","item","demo.core/search-unsplash","_","demo.core/api-key","demo.core/init-jqxMusicQuery","demo.core/start-flipbook-animation","demo.core/cycle-flip-book","demo.core/init-jqBlinkButton","button","G__17343","js/$","cljs.core/not","js/clearTimeout","audio-element","p1__17342#","demo.core/hideAllImages","demo.core/init-jqTiltButton","G__17344","demo.core/play-video!","video-url","video-el","demo.core/speak!","text","utterance","js/SpeechSynthesisUtterance","js/speechSynthesis","demo.core/access-key","demo.core/query","demo.core/handle-voice-change","selected-voice","demo.core/rand-int-n","js/Math.floor","js/Math.random","w","js/window.open","pageRand","res","results","first-image","image-url","cljs.core.get_in","author-name","author-link","html-content","wrapper-node-list","wrapper-vec","seq__17345","chunk__17346","count__17347","i__17348","vec__17355","vec__17358","cljs.core/vector","vec__17362","seq__17363","first__17364","ordered","p1__17361#","cljs.core.sort_by","js/parseInt","cljs.core/>","top-img-wrapper","flipBookEl","cycled","cljs.core.concat","cljs.core/rest","cnt","seq__17365","chunk__17366","count__17367","i__17368","vec__17375","vec__17378","demo.core/toggle-info-content!","demo.core/add-info-button","js/d3.select","demo.core/download-flipbook","vec__17381","fileName","owls-list","demo.core/upload-flipbook","input","demo.core/add-upload-button","demo.core/add-download-button","demo.core/mobile-device?","ua","js/navigator","cljs.core/boolean","cljs.core/re-find","demo.core/tablet-device?","width","js/window","height","diagonal","js/Math.sqrt","demo.core/touch-device?","or__5025__auto__","demo.core/device-size","demo.core/init","file-input","audio","p1__17384#"],"sourcesContent":["\r\n(ns demo.core\r\n  (:require [cljs.core.async :refer [<!]]\r\n            [goog.object :as gobj]\r\n            [goog.dom :as gdom]\r\n            )\r\n  )\r\n;;;\r\n;;; ===  Apophenia - Patternisity - pareidolia  ===\r\n;;; ---  unintentional perception of meaning or patterns  ---\r\n;;;\r\n;;;  ;;;  Frank Wroblewski\r\n;;;  ;;;      6/12/2025\r\n;;;\r\n;;;\r\n;;; Objective:\r\n;;;   discover set of image/audio pairs that elicit likely apophenia behavior\r\n;;;     - ToDo:\r\n;;;     - Use to score people on level of apophenia.\r\n;;;     - Find min,max,adv score\r\n;;;\r\n;;;\r\n;;; --- ToDo:\r\n;;; Add way to type in new query to drop down list, save in state.\r\n;;; If device is phone scale owl container to fit screen size.\r\n;;; Fix: code warnings maybe\r\n;;;\r\n;;; --- see: in project dir: shadow-ljs-Notes.txt\r\n;;; --- start serever:\r\n;;;\r\n;;;     npx shadow-cljs server\r\n;;;     npx shadow-cljs watch app\r\n;;;\r\n;;;\r\n;;; --- release steps from shadow-cljs project\r\n;;;\r\n;;; project dir: PS C:\\Users\\frankw\\cljwork\\d3\\d3-png-viewer>\r\n;;;\r\n;;;  npx shadow-cljs release app\r\n;;;\r\n;;;   from directory:  output-dir = resource/public/js\r\n;;;    copy to phone: Documents/pubic/pubic:\r\n;;;           js, vendor,  *.png , index.html\r\n;;;  start webserver app on phone (Simple HTTP Server)\r\n;;;  click owl icon  (127.0.0.1:8080)\r\n;;;\r\n;;; example ipv6\r\n;;; http://[fe80::b16c:bf03:b095:cb51]:8080\r\n;;;\r\n;;;\r\n;;; --- images from unsplash:  https://api.unsplash.com/search/photos\"    ---\r\n;;; --- audio from jamendo:    https://developer.jamendo.com/v3.0   ---\r\n;;;\r\n\r\n(defonce state (atom {:index 0 :playing? false :page 100 :blinkStart false :animation-running false}))\r\n\r\n(defn time-str []\r\n  (str (.toISOString (js/Date.))) )\r\n\r\n\r\n(defn moveAudioControls []\r\n     ;=================\r\n  (let [el (.querySelector js/document \".audio-controls-wrapper\")]\r\n    (when el\r\n      (set! (.-marginTop (.-style el)) \"-190px\")\r\n      (set! (.-opacity (.-style el)) \"0.40\")\r\n      ))\r\n  (let [el (.querySelector js/document \".track-info\")]\r\n    (when el\r\n      (set! (.-color (.-style el)) \"rgba(255, 255, 255, 0.5)\")\r\n      ))\r\n  )\r\n\r\n\r\n(defn incrmentStackIndex []\r\n  (if (:stackIndex @state)\r\n    (swap! state update :stackIndex inc)\r\n    (swap! state assoc :stackIndex 3000)\r\n    )\r\n    (moveAudioControls) ;-- if audio controls visible move up\r\n  )\r\n\r\n\r\n(defn generate-json []\r\n  (let [img-nodes (array-seq (.querySelectorAll js/document \".flipBookClass\"))\r\n        images-list (map-indexed\r\n                      (fn [i el]\r\n                        {:id  (str \"flipBook\" (+ 3000 i))\r\n                         :url (.-src el)})\r\n                      img-nodes)\r\n\r\n    ;; Find <audio> inside .audio-controls-wrapper\r\n    audio-wrapper (.querySelector js/document \".audio-controls-wrapper\")\r\n    audio-el (when audio-wrapper (.querySelector audio-wrapper \"audio\"))\r\n    audio-url (when audio-el (.-src audio-el))\r\n    now-str   (str \"OwlBuddy-\" (time-str))\r\n   ]\r\n    (list now-str\r\n      (js/JSON.stringify\r\n       (clj->js\r\n        {:name   now-str\r\n         :images images-list\r\n         :audio  audio-url\r\n         :trackName (:trackName @state)\r\n         :artistName (:artistName @state)\r\n     })))) )\r\n\r\n\r\n(defn download-json! [filename json-str]\r\n  (let [blob (js/Blob. (clj->js [json-str]) #js {:type \"application/json\"})\r\n        url (.createObjectURL js/URL blob)\r\n        a   (.createElement js/document \"a\")]\r\n    (set! (.-href a) url)\r\n    (set! (.-download a) filename)\r\n    ;; Optionally, make it invisible:\r\n    (set! (.-style.display a) \"none\")\r\n    (.appendChild (.-body js/document) a)\r\n    (.click a)\r\n    (.remove a)\r\n    (.revokeObjectURL js/URL url)))\r\n\r\n\r\n(defn flipBookImages? []\r\n  (let [container (.getElementById js/document \"flipBookStack\")\r\n        num-children (.-length (.-children container))]\r\n    (> num-children 0)\r\n    )\r\n  )\r\n\r\n(defn flipBookImageCount []\r\n  (let [container (.getElementById js/document \"flipBookStack\")\r\n        num-children (.-length (.-children container))]\r\n    num-children\r\n    )\r\n  )\r\n\r\n\r\n\r\n(defn not-covered? [el]\r\n  (let [rect (.getBoundingClientRect el)\r\n        x (+ (.-left rect) (/ (.-width rect) 2))\r\n        y (+ (.-top rect) (/ (.-height rect) 2))]\r\n    (identical? (.elementFromPoint js/document x y) el)))\r\n\r\n\r\n\r\n(defn addTrashCan [wrapper-div]\r\n     ;===========\r\n  (let [trash-img (.createElement js/document \"img\")]\r\n    (set! (.-src trash-img) \"images/trashCan.png\")\r\n    (set! (.-style trash-img)\r\n          \"position: absolute;\r\n         left: 0;\r\n         bottom: 0;\r\n         max-width: 32px;\r\n         max-height: 256px;\r\n         width: auto;\r\n         height: auto;\r\n         object-fit: contain;\r\n         z-index: 100;\r\n         opacity: 0.5;\r\n         pointer-events: auto;\r\n         margin: 0;\r\n         display: block;\")\r\n    (.appendChild wrapper-div trash-img)\r\n    (.addEventListener trash-img \"mousedown\"\r\n                       (fn [e]\r\n                         (let [parent (.-parentNode (.-target e))\r\n                               id (.-id parent)\r\n                               textField (.-textContent parent)\r\n                               ]\r\n                           (js/console.log \"trashCan callback \")\r\n                           (when parent\r\n                             (swap! state assoc :stop-to-delete true)\r\n                               (let [node-list (.querySelectorAll js/document \".flipBookContainer\")\r\n                                     images (vec (array-seq node-list))\r\n                                     n (count images)]\r\n\r\n                                ; (js/console.log \"second image: \" (.. (first (rest images)) -style -zIndex) )\r\n                                ; (js/console.log \"third image: \" (.. (first (rest (rest images))) -style -zIndex) )\r\n\r\n                                ;---  if only one image on list delete it ---\r\n                                (if (= n 1)\r\n                                  (.remove parent)\r\n\r\n                                  (let [found (some #(when (= (:last-top-z @state) (.. % -style -zIndex)) %) images)]\r\n                                    (when found\r\n                                      (when-let [parent (.-parentNode found)]\r\n                                        (.removeChild parent found))))\r\n\r\n                                  )\r\n                                 ))\r\n                             (swap! state assoc :stop-to-delete false)\r\n                               )))\r\n    )\r\n  )\r\n\r\n\r\n(defn restore-from-json [event]\r\n  (let [file (aget (.-files (.-target event)) 0)]\r\n    (when file\r\n      (let [reader (js/FileReader.)]\r\n        (set! (.-onload reader)\r\n              (fn [e]\r\n                (let [json-str (.. e -target -result)\r\n                      data     (js->clj (.parse js/JSON json-str) :keywordize-keys true)\r\n                      images   (:images data)\r\n                      trackName (:trackName data)\r\n                      artistName (:artistName data)\r\n                      image-stack (.getElementById js/document \"flipBookStack\")]\r\n\r\n                  ;; --- Will merge saved images with any already loaded ---\r\n                  ;; Remove existing flipBookContainer divs\r\n                  ;; (doseq [el (array-seq (.querySelectorAll js/document \".flipBookContainer\"))]\r\n                  ;; (.remove el))\r\n                  ;;\r\n                  ;; Add images from JSON\r\n                  (doseq [{:keys [id url]} images]\r\n\r\n                    (when (> (count url) 0)\r\n                      (let [wrapper-div (.createElement js/document \"div\")\r\n                            img-el (.createElement js/document \"img\")]\r\n                        ;; Set up wrapper div (same as your code)\r\n                        (set! (.-className wrapper-div) \"flipBookContainer\")\r\n                        (set! (.-id wrapper-div) (str id))\r\n                        (set! (.-style wrapper-div)\r\n                              \"width:320px; height:219px; position:absolute; overflow:hidden; display:block; background: rgba(0,0,0,0.55); color: white; margin-top:204px;\")\r\n                        (set! (.-zIndex (.-style wrapper-div)) (.substring id 8))\r\n                        ;--- for now going to use saved zIndex.  Alt: pick up from current live zIndex value.\r\n                        (incrmentStackIndex)  ; if no existing zIndex create one. Used to know when to move audio controls.\r\n                        ;; Set up image\r\n                        (set! (.-src img-el) url)\r\n                        (set! (.-className img-el) \"flipBookClass\")\r\n                        (set! (.-style img-el)\r\n                              \"max-width:100%; max-height:100%; width:auto; height:auto; display:block; margin:auto; object-fit:contain; pointer-events:none;\")\r\n                        ;; Append image to container, container to stack\r\n                        (.appendChild wrapper-div img-el)\r\n                        (addTrashCan wrapper-div)\r\n                        (.appendChild image-stack wrapper-div)))\r\n                    )\r\n\r\n                  ;; Optionally restore audio (as before)\r\n                  ;; --- if no audio saved leave any existing audio playing  ---\r\n                  ;;\r\n                  (when (:audio data)\r\n                    (play-jamendo-audio (:audio data) trackName artistName)\r\n                    (if (flipBookImages?) (moveAudioControls))\r\n                    )\r\n                  )))\r\n        (.readAsText reader file)))))\r\n\r\n\r\n\r\n(def $ js/jQuery)\r\n\r\n(def images\r\n  [\r\n   \"images/owl/blinkClosed.png\"\r\n   \"images/owl/blinkHalf-c.png\"\r\n   \"images/owl/blinkFull-c.png\"\r\n   \"images/owl/blinkHalf-c.png\"\r\n   \"images/owl/blinkClosed.png\"\r\n   \"images/owl/blinkHalf-c.png\"\r\n   \"images/owl/blinkFull-c.png\"\r\n   \"images/owl/blinkHalf-c.png\"\r\n   \"images/owl/blinkClosed.png\"\r\n   ])\r\n\r\n(def tiltImages\r\n  [\r\n   \"images/owl/tilt/tilt1788-c.png\"\r\n   \"images/owl/tilt/tilt1789-c.png\"\r\n   \"images/owl/tilt/tilt1790-c.png\"\r\n   \"images/owl/tilt/tilt1791-c.png\"\r\n   \"images/owl/tilt/tilt1792-c.png\"\r\n   \"images/owl/tilt/tilt1793-c.png\"\r\n   \"images/owl/tilt/tilt1792-c.png\"\r\n   \"images/owl/tilt/tilt1791-c.png\"\r\n   \"images/owl/tilt/tilt1790-c.png\"\r\n   \"images/owl/tilt/tilt1789-c.png\"\r\n   \"images/owl/tilt/tilt1788-c.png\"\r\n   ])\r\n\r\n\r\n(def background-image \"images/owl/background.png\")\r\n\r\n;; UPDATED: Applied scaling (animation images to 219px for 219/320 ratio) and centering.\r\n;; - Background: Fills container width (320px), vertically centered.\r\n;; - Animation images: Scaled to 219px width, centered both vertically and horizontally.\r\n;;\r\n(defn show-image [image-list idx]\r\n     ;==========\r\n  (let [container (-> js/d3 (.select \"#owl-container\"))]\r\n    ;; Handle the background image (fills width, vertically centered)\r\n    (-> container\r\n        (.selectAll \"img.background\")\r\n        (.data #js [background-image])\r\n        (.join \"img\")\r\n        (.classed \"background\" true)\r\n        (.attr \"src\" identity)\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"top\" \"10%\")                ; NEW: For vertical centering\r\n        (.style \"left\" \"0\")                 ; Fill from left\r\n        (.style \"transform\" \"translateY(-50%)\")  ; NEW: Center vertically\r\n        (.style \"width\" \"100%\")             ; Fill container width (320px)\r\n        (.style \"height\" \"auto\")            ; Maintain aspect ratio\r\n        (.style \"z-index\" \"0\")              ; Behind animations\r\n        (.style \"display\" \"block\"))         ; Always show\r\n\r\n    ;; Handle animated images (scaled to 219px, fully centered)\r\n    (-> container\r\n        (.selectAll \"img.animated\")\r\n        (.data (clj->js image-list))\r\n        (.join \"img\")\r\n        (.classed \"animated\" true)\r\n        (.attr \"src\" identity)\r\n        (.style \"display\" (fn [d i]         ; Show only current frame\r\n                            (if (= i idx) \"block\" \"none\")))\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"top\" 0)                ; NEW: For vertical centering\r\n        (.style \"left\" \"50%\")               ; NEW: For horizontal centering\r\n        (.style \"transform\" \"translate(-50%, -100%)\")  ; NEW: Center both axes\r\n        (.style \"width\" \"219px\")            ; NEW: Scale to 219px for 219/320 ratio\r\n        (.style \"height\" \"auto\")            ; Maintain aspect ratio\r\n        (.style \"z-index\" \"1\")              ; On top of background\r\n        (.on \"click\" nil))))                ; Prevent multiple bindings\r\n\r\n\r\n(defn cycle-owl-blink-images []\r\n  (when-not (:playing? @state)\r\n    (swap! state assoc :index 0 :playing? true)\r\n    (let [frame-count (count images)\r\n          interval-ms 190]\r\n      (letfn [(next-frame [i]\r\n                (when (< i frame-count)\r\n                  (swap! state assoc :index i)\r\n                  (show-image images i)\r\n                  (js/setTimeout\r\n                    #(next-frame (inc i))\r\n                    interval-ms))\r\n                (when (= i (dec frame-count))\r\n                  (swap! state assoc :playing? false)))]\r\n        (next-frame 0)))))\r\n\r\n\r\n\r\n(defn cycle-owl-tilt-images []\r\n  (when-not (:playing? @state)\r\n    (swap! state assoc :index 0 :playing? true)\r\n    (let [frame-count (count tiltImages)\r\n          interval-ms 190]\r\n      (letfn [(next-frame [i]\r\n                (when (< i frame-count)\r\n                  (swap! state assoc :index i)\r\n                  (show-image tiltImages i)\r\n                  (js/setTimeout\r\n                    #(next-frame (inc i))\r\n                    interval-ms))\r\n                (when (= i (dec frame-count))\r\n                  (swap! state assoc :playing? false)))]\r\n        (next-frame 0)))))\r\n\r\n;;\r\n;;===============================================\r\n;;\r\n\r\n  (def cached-blink-images\r\n    (mapv (fn [filename]\r\n            (let [img (js/Image.)]\r\n              (set! (.-src img) filename)\r\n              img))\r\n          images))\r\n\r\n(def cached-tilt-images\r\n  (mapv (fn [filename]\r\n          (let [img (js/Image.)]\r\n            (set! (.-src img) filename)\r\n            img))\r\n        tiltImag\r\n        es))\r\n\r\n\r\n(defonce background-imageOnce\r\n         (let [img (js/Image.)]\r\n           (set! (.-src img) background-image)\r\n           img))\r\n\r\n\r\n(defn Ashow-image [image-list idx]\r\n   ; (js/console.log \"Ashow-image: \" image-list \" idx: \" idx)\r\n  (let [container (-> js/d3 (.select \"#owl-container\"))]\r\n    ;; --- Background image ---\r\n    (-> container\r\n        (.selectAll \"img.background\")\r\n        (.data #js [background-imageOnce])\r\n        (.join \"img\")\r\n        (.classed \"background\" true)\r\n        (.attr \"src\" #(.-src background-imageOnce))\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"top\" \"10%\")\r\n        (.style \"left\" \"0\")\r\n        (.style \"transform\" \"translateY(-50%)\")\r\n        (.style \"width\" \"100%\")\r\n        (.style \"height\" \"auto\")\r\n        (.style \"z-index\" \"0\")\r\n        (.style \"display\" \"block\"))\r\n\r\n    ;; --- Remove old animated frames ---\r\n    (-> container\r\n        (.selectAll \"img.animated\")\r\n        (.remove))\r\n\r\n    ;; --- Animated image (from cache) ---\r\n    (let [img-el (nth image-list idx)]\r\n\r\n      (set! (.-className img-el) \"animated\")\r\n      (set! (.. img-el -style -display) \"block\")\r\n      (set! (.. img-el -style -position) \"absolute\")\r\n      (set! (.. img-el -style -top) \"0\")\r\n      (set! (.. img-el -style -left) \"50%\")\r\n      (set! (.. img-el -style -transform) \"translate(-50%, -100%)\")\r\n      (set! (.. img-el -style -width) \"219px\")\r\n      (set! (.. img-el -style -height) \"auto\")\r\n      (set! (.. img-el -style -zIndex) \"1\")\r\n      (.appendChild (.node container) img-el))))\r\n\r\n\r\n(defn cycle-owl-images [cachedImages]\r\n  (let [frame-count (count cachedImages)\r\n        interval-ms 190]\r\n    (letfn [(step [i]\r\n              (when (< i frame-count)\r\n                (Ashow-image cachedImages i)\r\n                (js/setTimeout\r\n                  #(step (inc i))\r\n                  interval-ms)))]\r\n      (step 0))))\r\n\r\n\r\n;;;\r\n;;; https://developer.jamendo.com/v3.0\r\n;;;\r\n\r\n(defn play-jamendo-audio [url track-name artist-name]\r\n     ;==================\r\n  (let [container (.getElementById js/document \"owl-container\")]\r\n    (doseq [el (array-seq (.getElementsByClassName js/document \"audio-controls-wrapper\"))] (.remove el))\r\n    (doseq [el (array-seq (.getElementsByClassName js/document \"track-info\"))] (.remove el))\r\n    ;; Audio controls wrapper: add position/z-index\r\n    (let [audio-wrap (.createElement js/document \"div\")]\r\n      (set! (.-className audio-wrap) \"audio-controls-wrapper\")\r\n      (set! (.-style audio-wrap) \"width:256px; margin:12px auto 0 auto; display:block; position:relative; z-index:4016;\")\r\n      (let [audio-el (.createElement js/document \"audio\")]\r\n        (set! (.-src audio-el) url)\r\n        (set! (.-controls audio-el) true)\r\n        (set! (.-loop audio-el) true)\r\n        (set! (.-style audio-el) \"width:100%; display:block; z-index:4016;\")\r\n        (.appendChild audio-wrap audio-el)\r\n        (.appendChild container audio-wrap)\r\n        (let [play-promise (.play audio-el)]\r\n          (when play-promise\r\n            (.catch play-promise\r\n                    (fn [err]\r\n                      (js/console.warn \"Autoplay blocked; user must click play.\")))))\r\n        (let [info-el (.createElement js/document \"div\")]\r\n          (set! (.-className info-el) \"track-info\")\r\n          (set! (.-style info-el)\r\n                \"margin:7px 0 0 0; width:100%; color:#fff; font-size:13px; background:rgba(0,0,0,0.2); word-break:break-word; text-align:left; padding:3px 8px; border-radius:5px; box-sizing:border-box; position:relative; z-index:4012;\")\r\n          (set! (.-textContent info-el)\r\n                (str track-name \" \u2014 \" artist-name))\r\n          (.appendChild container info-el))))))\r\n\r\n\r\n\r\n(defn play-random-jamendo-track\r\n     ;=========================\r\n  [query client-id audioformat]\r\n  (let [url (str \"https://api.jamendo.com/v3.0/tracks/?client_id=\" client-id\r\n                 \"&format=json\"\r\n                 \"&limit=20\"\r\n                 \"&namesearch=\" (js/encodeURIComponent query)\r\n                 \"&audioformat=\" audioformat)]\r\n    (-> (js/fetch url)\r\n        (.then #(.json %))\r\n        (.then (fn [data]\r\n                 (let [clj-data (js->clj data :keywordize-keys true)\r\n                       tracks   (:results clj-data)]\r\n                   (if (seq tracks)\r\n                     (do\r\n                       (let [ nth-track (nth tracks (rand-int (count tracks)))\r\n                              audio-url (:audio nth-track)]\r\n                              (swap! state assoc :trackName (:name nth-track))\r\n                              (swap! state assoc :artistName (:artist_name nth-track))\r\n                             ; (js/console.log \"Playing:\" (:name nth-track) \"by\" (:artist_name nth-track))\r\n                              (play-jamendo-audio audio-url (:name nth-track) (:artist_name nth-track)))\r\n                       (if (:stackIndex @state) (moveAudioControls))\r\n                       )\r\n                     (js/alert \"No tracks found!\")))))\r\n        (.catch (fn [err]\r\n                  (js/console.error \"Jamendo API error:\" err))))))\r\n\r\n\r\n\r\n;; Valid formats: \"mp31\" \"mp32\" \"ogg\"\r\n;; (search-jamendo-tracks \"jazz\" \"0d8016e0\" \"ogg\")\r\n\r\n;;;\r\n;;;===============  end jamendo  =======================\r\n;;;\r\n\r\n\r\n\r\n(def image-choices\r\n  #js [\"Fairies\" \"Toys\" \"Puppy\" \"Ghost\" \"Apophen\"])\r\n\r\n(def music-choices\r\n  #js [\"blues\" \"rock\" \"jazz\" \"raggae\" \"Apophen\"])\r\n\r\n\r\n\r\n\r\n(defn init-jqxImageQuery []\r\n     ;==================\r\n  (let [jq ($ \"#jqxImageQuery\")]\r\n    (js-invoke jq \"jqxDropDownList\"\r\n               (clj->js {:source         image-choices\r\n                         :selectedIndex  0\r\n                         :width          \"70px\"\r\n                         :height         \"24px\"\r\n                         :dropDownHeight \"150px\"\r\n                         :theme          \"orange\"}))\r\n\r\n    ;; Handler for selecting an item\r\n    (.on jq \"select\"\r\n         (fn [e]\r\n           (let [args (.-args e)\r\n                 idx  (.-index args)\r\n                 val  (aget image-choices idx)]\r\n             (swap! state assoc :query val)\r\n             (when (not= (device-type) :desktop)\r\n             (js-invoke jq \"jqxDropDownList\" \"close\"))\r\n              )))\r\n\r\n    ;; Handler for closing the dropdown (search on select)\r\n    (.on jq \"close\"\r\n         (fn [e]\r\n           (let [item (js-invoke jq \"jqxDropDownList\" \"getSelectedItem\")\r\n                 val (.-value item)]\r\n             (when val\r\n               (search-unsplash val)))))\r\n\r\n    ;; Handler for opening the dropdown: set background image\r\n    (.on jq \"open\"\r\n         (fn [_]\r\n           (set! (.. (aget jq 0) -style -backgroundImage)\r\n                 \"url('butConcave8.png')\")))\r\n\r\n    ;; Handler for closing the dropdown: set another background image\r\n    (.on jq \"close\"\r\n         (fn [_]\r\n           (set! (.. (aget jq 0) -style -backgroundImage)\r\n                 \"url('butConvex8.png')\")))))\r\n\r\n\r\n(def api-key \"50911119-a113db7cf4ad0920388f14481\")\r\n\r\n\r\n\r\n(defn init-jqxMusicQuery []\r\n     ;==================\r\n  ;; Render the music options dropdown\r\n  (let [jq ($ \"#jqxMusicQuery\")]\r\n    ;; Initialize the jqxDropDownList widget safely\r\n    (js-invoke jq \"jqxDropDownList\"\r\n               (clj->js {:source         music-choices\r\n                         :selectedIndex  0\r\n                         :width          \"70px\"\r\n                         :height         \"24px\"\r\n                         :dropDownHeight \"150px\"\r\n                         :theme          \"orange\"}))\r\n\r\n    ;; Handle \"select\" event\r\n    (.on jq \"select\"\r\n         (fn [e]\r\n           (let [args (.-args e)\r\n                 idx  (.-index args)\r\n                 val  (aget music-choices idx)]\r\n             (swap! state assoc :voice val)\r\n             (when (not= (device-type) :desktop)\r\n             (js-invoke jq \"jqxDropDownList\" \"close\"))\r\n             ;; Play music now only on close event\r\n             )))\r\n\r\n    ;; Handle \"close\" event\r\n    (.on jq \"close\"\r\n         (fn [e]\r\n           (let [item (js-invoke jq \"jqxDropDownList\" \"getSelectedItem\")\r\n                 val (when item (.-value item))]\r\n            ; (js/console.log \"Selected value via getSelectedItem:\" val)\r\n             (cycle-owl-images cached-tilt-images)\r\n             (play-random-jamendo-track val \"0d8016e0\" \"mp32\"))))\r\n\r\n    ;; Change background on open\r\n    (.on jq \"open\"\r\n         (fn [_]\r\n           (set! (.. (aget jq 0) -style -backgroundImage)\r\n                 \"url('butConcave8.png')\")))\r\n\r\n    ;; Change background on close\r\n    (.on jq \"close\"\r\n         (fn [_]\r\n           (set! (.. (aget jq 0) -style -backgroundImage)\r\n                 \"url('butConvex8.png')\")))))\r\n\r\n\r\n(defn start-flipbook-animation [] (cycle-flip-book))\r\n     ;========================\r\n\r\n\r\n(defn init-jqBlinkButton []\r\n     ;==================\r\n  (let [container (.getElementById js/document \"blink-button-container\")\r\n        button (.createElement js/document \"button\")]\r\n    (set! (.-id button) \"blink-button\")\r\n    (set! (.-innerText button) \"Blink\")\r\n\r\n    (doto (.-style button)\r\n      (set! -opacity \"0.7\")\r\n      (set! -position \"absolute\")\r\n      (set! -bottom \"0px\")\r\n      (set! -left \"10px\")\r\n      (set! -zIndex \"4020\")\r\n      (set! -backgroundColor \"orange\")  ;; this is having an effect !!!\r\n      (set! -borderRadius \"12px\")\r\n      )\r\n\r\n    (.appendChild container button)\r\n\r\n    (-> (js/$ \"#blink-button\")\r\n      ;  (.addClass \"custom-orange-button\")\r\n        (.jqxButton (clj->js {:width \"62px\" :height \"28px\" :theme \"material\"}))\r\n        (.css \"border-width\" \"0\") ; --  outer most edge\r\n        )\r\n\r\n    ;; Add click handler\r\n    (.on (js/$ \"#blink-button\") \"click\"\r\n         (fn [_]    ;--- blink button triggers owl eyes animation\r\n             (cycle-owl-blink-images)\r\n           (if (> (flipBookImageCount) 1)\r\n               (do   ;--- if less then 1 images in flipbook do not toggle & start animation ---\r\n                 (swap! state update :blinkStart not)\r\n                 (if (:blinkStart @state)\r\n                   (do\r\n                    ; (js/console.log \" Blink:: animation starting \")\r\n                     (swap! state assoc :animation-running true)\r\n                     ;-- set pointer-events to auto --- which enables event to delete function\r\n                     (start-flipbook-animation)\r\n                     )\r\n                   (do\r\n                     (swap! state assoc :animation-running false)\r\n                     (when (:flipTimer @state)  (js/clearTimeout (:flipTimer @state)))\r\n                     ;--- set pointer-events to none --- which enables event to info,up,down buttons\r\n                   )\r\n                 )\r\n              ;--- blink button plays Owl sound ---\r\n                   (when-let [audio-element (.getElementById js/document \"blink-sound\")]\r\n                    (-> (.play audio-element)\r\n                      ;;;  (.then #(js/alert \"\u2705 Audio played successfully ****\"))\r\n                    (.catch #(js/alert (str \"\u274c Audio play failed:\" %))))\r\n                    )\r\n              ); end do\r\n               ; if only one image flip visible / invisible\r\n               ; stop animation for one image in book\r\n               (if   (= (flipBookImageCount) 1)\r\n                 (do\r\n                   (swap! state update :blinkStart not)\r\n                   (if (:blinkStart @state)\r\n                     (do\r\n                      ; (js/console.log \" Blink:: show 1 image \")\r\n                       (swap! state assoc :animation-running true)\r\n                       (let [node-list (.querySelectorAll js/document \".flipBookContainer\")\r\n                             images (vec (array-seq node-list))\r\n                             n (count images)]\r\n                         (set! (.. (first images) -style -opacity) \"1\")\r\n                         )\r\n                       )\r\n                     (do\r\n                       (swap! state assoc :animation-running false)\r\n                       ;(js/console.log \" Blink:: hide one image\")\r\n                       (when (:flipTimer @state)  (js/clearTimeout (:flipTimer @state)))\r\n                       (hideAllImages)\r\n                       )\r\n                     )\r\n                 ))\r\n               )))\r\n    )\r\n  )\r\n\r\n(comment\r\n  (add-watch state :blink-watcher\r\n             (fn [key atom old-state new-state]\r\n               (when (not= (:blinkStart old-state) (:blinkStart new-state))\r\n                 (do\r\n                  ; (js/console.log \"blinkStart changed to:\" (:blinkStart new-state))\r\n                   (if (:blinkStart new-state)\r\n                     (animate-image-sequence)\r\n                     )\r\n                   )\r\n                 )\r\n               )\r\n             )\r\n  )\r\n\r\n\r\n(defn init-jqTiltButton []\r\n     ;=================\r\n  ;; Create a button element and append to container\r\n  (let [container (.getElementById js/document \"tilt-button-container\")\r\n        button (.createElement js/document \"button\")]\r\n    (set! (.-id button) \"tilt-button\")\r\n    (set! (.-innerText button) \"- Tilt -\")\r\n\r\n    (doto (.-style button)\r\n      (set! -opacity \"0.7\")\r\n      (set! -position \"absolute\")\r\n      (set! -bottom \"0px\")\r\n      (set! -right \"10px\")\r\n      (set! -zIndex \"4020\")\r\n      (set! -backgroundColor \"orange\")  ;; this is having an effect !!!\r\n      (set! -borderRadius \"12px\")\r\n      )\r\n    (.appendChild container button)\r\n\r\n    (-> (js/$ \"#tilt-button\")\r\n        (.jqxButton (clj->js {:width \"62px\" :height \"28px\" :theme \"material\"}))\r\n        (.css \"border-width\" \"0\") ; --  outer most edge\r\n        )\r\n\r\n    ;; Add click handler\r\n    (.on (js/$ \"#tilt-button\") \"click\"\r\n         (fn [_]\r\n           (cycle-owl-tilt-images)\r\n           (if (:imageUrl @state)\r\n             (do\r\n               ;;-- save only once --\r\n               (if (not= (:lastSavedImageUrl @state) (:imageUrl @state))\r\n                 (do\r\n                   (swap! state assoc :lastSavedImageUrl (:imageUrl @state))\r\n                   (incrmentStackIndex)\r\n\r\n                   (let [image-stack (.getElementById js/document \"flipBookStack\")\r\n                         wrapper-div (.createElement js/document \"div\")\r\n                         img-el (.createElement js/document \"img\")]\r\n                     ;; Set up wrapper div (the fixed-size container)\r\n                     (set! (.-className wrapper-div) \"flipBookContainer\")\r\n                     (set! (.-style wrapper-div)\r\n                           \"width:320px; height:219px; position:absolute; pointer-events: none; overflow:hidden; display:block; background: rgba(0,0,0,0.55); color: white; \")\r\n                     (set! (.-id wrapper-div) (str \"flipBookContainer\" (:stackIndex @state)))\r\n                     (set! (.-zIndex (.-style wrapper-div)) (str (:stackIndex @state)))\r\n                     (set! (.-marginTop (.-style wrapper-div)) \"204px\")\r\n\r\n                     ;; dddd (set! (.-textContent wrapper-div) (str \"flipBookContainer\" (:stackIndex @state)))\r\n\r\n                     ;; Set up the image\r\n                     (set! (.-src img-el) (:imageUrl @state))\r\n                     (set! (.-className img-el) \"flipBookClass\")\r\n                     (set! (.-style img-el)\r\n                           \"max-width:100%; max-height:100%; width:auto; height:auto; display:block; margin:auto; object-fit:contain; pointer-events:none;\")\r\n\r\n                     ;; Add the image to the container, then container to the stack\r\n                     (.appendChild wrapper-div img-el)\r\n                     (addTrashCan wrapper-div)\r\n                     (.appendChild image-stack wrapper-div))\r\n\r\n                   (let [el (.querySelector js/document \".audio-controls-wrapper\")]\r\n                     (when el\r\n                       (set! (.-marginTop (.-style el)) \"-190px\")\r\n                       (set! (.-opacity (.-style el)) \"0.40\")\r\n                       ))\r\n\r\n                   (let [el (.querySelector js/document \".track-info\")]\r\n                     (when el\r\n                       (set! (.-color (.-style el)) \"rgba(255, 255, 255, 0.5)\")\r\n                       ))\r\n\r\n                   )\r\n                 )))\r\n           )\r\n         )))\r\n\r\n\r\n(defn play-video! [video-url]\r\n     ;===========\r\n  (let [video-el (.createElement js/document \"video\")]\r\n    (set! (.-src video-el) video-url)\r\n    (set! (.-controls video-el) true) ;; shows play/pause, etc.\r\n    (set! (.-width video-el) 480)\r\n    (.appendChild (.-body js/document) video-el)\r\n    (.play video-el)))\r\n\r\n\r\n\r\n(defn speak! [text]\r\n     ;======\r\n  (let [utterance (js/SpeechSynthesisUtterance. text)]\r\n    ;; Optional voice customization\r\n    (set! (.-lang utterance) \"en-US\")\r\n    ;; Adjust pitch, rate, and volume if desired\r\n    (set! (.-pitch utterance) 1)\r\n    (set! (.-rate utterance) 0.50)\r\n    (set! (.-volume utterance) 0.8)\r\n    ;; Speak it\r\n    (.speak js/speechSynthesis utterance)))\r\n\r\n\r\n;;; ---  Search for images in upsplash  ---\r\n;;; ---  Open in second window          ---\r\n(def access-key \"QRpZSqy6ot29xCjy6uaNmW_0MhNSFfWal8oN3ivFwHM\")\r\n(def query \"fairies\")     ; fairies  &  leprechauns\r\n\r\n\r\n\r\n(defn handle-voice-change [e]\r\n     ;===================\r\n  (let [selected-voice (.. e -target -value)]\r\n    (js/alert (str \"Voice option selected:\" selected-voice))\r\n    (swap! state assoc :voice selected-voice)\r\n    )\r\n  )\r\n\r\n(defn rand-int-n [n] (js/Math.floor (* (js/Math.random) n)))\r\n     ;==========\r\n\r\n\r\n\r\n(defn search-unsplash [query]\r\n     ;===============\r\n  (let [w (js/window.open \"\" \"_blank\" \"width=900,height=700,resizable,scrollbars\")\r\n        pageRand (js/Math.floor (* (js/Math.random) 120))   ;ddd 100))\r\n        url (str \"https://api.unsplash.com/search/photos\"\r\n                 \"?query=\" (js/encodeURIComponent query)\r\n                 \"&page=\" pageRand\r\n                 \"&client_id=\" access-key)]\r\n    (if (nil? w)\r\n      (js/alert \"Popup blocked! Please allow popups for this site.\")\r\n      (-> (js/fetch url)\r\n          (.then (fn [res] (.json res)))\r\n          (.then (fn [data]\r\n                   (let [results (js->clj (.-results data) :keywordize-keys true)\r\n                        ; first-image (first results)\r\n                         first-image (nth results (rand-int (count results)))\r\n                         image-url (get-in first-image [:urls :regular])\r\n                         author-name (get-in first-image [:user :name])\r\n                         author-link (get-in first-image [:user :links :html])\r\n                         html-content\r\n                         (str \"<html><head><title>Unsplash Image</title>\"\r\n                              \"<style>\r\n                                body { margin:0; background:#222; }\r\n                                .container { position:relative; width:100vw; height:100vh; display:flex; justify-content:center; align-items:center;}\r\n                                img { max-width:90vw; max-height:80vh; display:block; border-radius:14px; box-shadow:0 2px 18px #000a; }\r\n                                .overlay {\r\n                                  position:absolute;\r\n                                  left:24px; bottom:24px;\r\n                                  background:rgba(0,0,0,0.65);\r\n                                  color:white; font-size:22px;\r\n                                  border-radius:8px;\r\n                                  padding:10px 20px;\r\n                                  font-family:sans-serif;\r\n                                  text-shadow: 0 2px 6px #000a;\r\n                                }\r\n                                .overlay a { color:#aad; text-decoration:none;}\r\n                                .overlay a:hover { text-decoration:underline;}\r\n                              </style></head><body>\"\r\n                              \"<div class='container'>\"\r\n                              \"<img src='\" image-url \"' />\"\r\n                              \"<div class='overlay'>Photo by <a href='\" author-link \"' target='_blank'>\" author-name \"</a> on Unsplash</div>\"\r\n                              \"</div></body></html>\")]\r\n\r\n                     ;; Immediately write HTML to the new window's document\r\n                     (.write (.-document w) html-content)\r\n                     (.close (.-document w)\r\n                             (swap! state assoc :imageUrl image-url)\r\n                             ))))\r\n          (.catch (fn [err]\r\n                    (js/console.error \"Error fetching from Unsplash:\" err)))))))\r\n\r\n\r\n\r\n\r\n(defn hideAllImages []\r\n     ;=============\r\n  (let [wrapper-node-list (.querySelectorAll js/document \".flipBookContainer\")\r\n        wrapper-vec (vec (array-seq wrapper-node-list))]\r\n    (doseq [[i el] (map-indexed vector wrapper-vec)]\r\n      (set! (.. el -style -opacity) \"0\")\r\n      (set! (.. el -style -pointerEvents) \"none\")\r\n      ;; Set pointer-events:none for the child element (if it exists)\r\n      ;;  (when-let [child (.-firstElementChild el)]\r\n      ;;   (set! (.. child -style -pointerEvents) \"none\"))\r\n     )))\r\n\r\n\r\n\r\n(defn cycle-flip-book []\r\n     ;==========-----\r\n  (when (:animation-running @state)\r\n    (let [node-list (.querySelectorAll js/document \".flipBookContainer\")\r\n          images (vec (array-seq node-list))\r\n          n (count images)]\r\n      (when (> n 0)\r\n        (let [ordered (sort-by #(js/parseInt (.. % -style -zIndex)) > images)\r\n              [top-img-wrapper & _] ordered]\r\n          ;;-- show id of fadding image  ie top image\r\n              ;;ssss     (str \" top id: \" (.-id  top-img))\r\n          (let\r\n            [flipBookEl (.querySelector js/document \"#flipBookStack\")]\r\n           ;; (js/console.log \" top  id: \" (.-id top-img-wrapper))\r\n           ;;(js/console.log \"top z: \" (.. top-img-wrapper -style -zIndex))\r\n           (swap! state assoc :last-top-z  (str (- (js/parseInt (.. top-img-wrapper -style -zIndex) ) 1) ) )\r\n            )\r\n\r\n          ;; Fade out the top image\r\n          (set! (.. top-img-wrapper -style -transition) \"opacity 3000ms\")\r\n          (set! (.-opacity (.-style top-img-wrapper)) \"0\")\r\n          ;; After fade, move top to back and reassign z-indexes\r\n          (swap!  state update :flipTimer  (js/setTimeout\r\n            (fn []\r\n              (let [cycled (concat (rest ordered) [(first ordered)])\r\n                    cnt (count cycled)]\r\n                (doseq [[i el] (map-indexed vector cycled) ]\r\n                  (set! (.. el -style -zIndex) (str (+ 3000 (- cnt i 1))))\r\n                    (set! (.. el -style -opacity) \"1\")\r\n                  )\r\n\r\n                (cond\r\n                  (:stop-to-delete @state) (do (js/console.log \"stop\"))\r\n                  (:animation-running @state) (do (js/console.log \"not stopped to delete , running \" (cycle-flip-book)))\r\n                  :else (do (js/console.log \"not stopped to delete, not running, hideAllImages \") (hideAllImages))\r\n                  )\r\n\r\n               ; (if (:animation-running @state)\r\n               ;     (cycle-flip-book)\r\n               ;     (hideAllImages)\r\n               ; )\r\n              ))\r\n           3000))\r\n                  )))))\r\n\r\n\r\n\r\n\r\n(defn toggle-info-content! []\r\n     ;====================\r\n  (let [el (.getElementById js/document \"info-text\")]\r\n    (if (= (.. el -style -opacity) \"1\")\r\n      (do\r\n        (set! (.. el -style -opacity) \"0.0\")\r\n        (set! (.. el -style -backgroundColor) \"transparent\")\r\n        (set! (.. el -style -pointerEvents) \"none\")\r\n        (set! (.. js/document (getElementById \"upload-button\") -style -display) \"\")\r\n        (set! (.. js/document (getElementById \"download-button\") -style -display) \"\")\r\n        )    ;; optional: make unclickable\r\n      (do\r\n        (set! (.. js/document (getElementById \"upload-button\") -style -display) \"none\")\r\n        (set! (.. js/document (getElementById \"download-button\") -style -display) \"none\")\r\n        (set! (.. el -style -opacity) \"1\")\r\n        (set! (.. el -style -backgroundColor) \"rgba(0,0,0,0.5)\")\r\n        )\r\n      )\r\n    ))\r\n\r\n\r\n(defn add-info-button []\r\n     ;===============\r\n  (let [container (.getElementById js/document \"info-button-container\")]\r\n\r\n    (-> (js/d3.select container)\r\n        (.append \"button\")\r\n        (.attr \"id\" \"info-button\")\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"right\" \"6px\")\r\n        (.style \"bottom\" \"76px\")\r\n        (.style \"width\" \"20px\")\r\n        (.style \"height\" \"20px\")\r\n        (.style \"padding\" \"0\")\r\n        (.style \"border\" \"none\")\r\n        (.style \"background\" \"none\")\r\n        (.style \"cursor\" \"pointer\")\r\n        (.style \"opacity\" \"0.7\")\r\n        (.style \"z-index\" \"4013\")\r\n        (.style \"pointer-events\" \"auto\")\r\n        (.html (str \"<img src='images/info_orange_border.png' style='width:100%;height:100%;display:block;'/>\"))\r\n        (.on \"click\" (fn [_] (toggle-info-content!))))))\r\n\r\n\r\n(defn download-flipbook []\r\n     ;=================\r\n  (let [[fileName owls-list] (generate-json)]\r\n    (download-json! (str fileName \".json\") owls-list)\r\n    )\r\n  )\r\n\r\n\r\n(defn upload-flipbook []\r\n  ;=============\r\n  (let [input (.getElementById js/document \"json-upload\")]\r\n    (.click input)))\r\n\r\n\r\n(defn add-upload-button []\r\n    ;==================\r\n  (let [container (.getElementById js/document \"info-button-container\")]\r\n\r\n    (-> (js/d3.select container)\r\n        (.append \"button\")\r\n        (.attr \"id\" \"upload-button\")\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"right\" \"6px\")\r\n        (.style \"bottom\" \"140px\")\r\n        (.style \"width\" \"20px\")\r\n        (.style \"height\" \"20px\")\r\n        (.style \"padding\" \"0\")\r\n        (.style \"border\" \"none\")\r\n        (.style \"background\" \"none\")\r\n        (.style \"cursor\" \"pointer\")\r\n        (.style \"opacity\" \"0.7\")\r\n        (.style \"z-index\" \"4014\")\r\n        (.style \"pointer-events\" \"auto\")\r\n        (.html (str \"<img src='images/upload.png' style='width:100%;height:100%;display:block;'/>\"))\r\n        (.on \"click\" (fn [_] (upload-flipbook))))))\r\n\r\n\r\n(defn add-download-button []\r\n     ;==================\r\n  (let [container (.getElementById js/document \"info-button-container\")]\r\n\r\n    (-> (js/d3.select container)\r\n        (.append \"button\")\r\n        (.attr \"id\" \"download-button\")\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"right\" \"6px\")\r\n        (.style \"bottom\" \"107px\")\r\n        (.style \"width\" \"20px\")\r\n        (.style \"height\" \"20px\")\r\n        (.style \"padding\" \"0\")\r\n        (.style \"border\" \"none\")\r\n        (.style \"background\" \"none\")\r\n        (.style \"cursor\" \"pointer\")\r\n        (.style \"opacity\" \"0.7\")\r\n        (.style \"z-index\" \"4014\")\r\n        (.style \"pointer-events\" \"auto\")\r\n        (.html (str \"<img src='images/download.png' style='width:100%;height:100%;display:block;'/>\"))\r\n        (.on \"click\" (fn [_] (download-flipbook))))))\r\n\r\n\r\n\r\n;;;\r\n;;; ==========  device type  ===============\r\n;;;\r\n(defn mobile-device? []\r\n  (let [ua (.-userAgent js/navigator)]\r\n    (boolean (re-find #\"(?i)Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini\" ua))))\r\n\r\n(defn tablet-device? []\r\n  (let [width (.-innerWidth js/window)\r\n        height (.-innerHeight js/window)\r\n        diagonal (js/Math.sqrt (+ (* width width) (* height height)))]\r\n    (and (mobile-device?) (> diagonal 1000)))) ; heuristic\r\n\r\n(defn touch-device? []\r\n  (or (.-ontouchstart js/window)\r\n      (> (.-maxTouchPoints js/navigator) 0)))\r\n\r\n(defn device-type []\r\n  (cond\r\n    (tablet-device?) :tablet\r\n    (mobile-device?) :mobile\r\n    :else :desktop))\r\n\r\n\r\n(defn device-size []\r\n  (let [width (.-innerWidth js/window)\r\n        height (.-innerHeight js/window)]\r\n        (list width height)\r\n   )\r\n  )\r\n\r\n;;;\r\n;;; ======================  I N I T  =============================\r\n;;;\r\n\r\n\r\n(defn ^:export init []\r\n     ;================\r\n\r\n  (when-let [file-input (.getElementById js/document \"json-upload\")]\r\n    (.addEventListener file-input \"change\" restore-from-json))\r\n\r\n  (add-info-button)\r\n  (add-upload-button)\r\n  (add-download-button)\r\n  (show-image images 0)\r\n\r\n  ;; --- Create an invisible (hidden)( button over nose to trigger audio ---\r\n  (let [container (-> js/d3 (.select \".layer-container\"))\r\n        button (.append container \"button\")]\r\n    (-> button\r\n        (.attr \"id\" \"audioTrigger\")\r\n        (.style \"position\" \"absolute\")\r\n        (.style \"top\"  \"42%\")\r\n        (.style \"left\" \"50%\")\r\n        (.style \"transform\" \"translate(-50%, -50%)\")\r\n        (.style \"width\" \"40px\")\r\n        (.style \"height\" \"49px\")\r\n        (.style \"z-index\" \"4016\")\r\n        (.style \"background\" \"rgba(255,165,0,0.00)\")\r\n        (.style \"border\" \"none\")\r\n        (.style \"cursor\" \"pointer\")\r\n        (.style \"padding\" \"0\")\r\n        (.style \"padding-top\" \"2\")\r\n        (.style \"font-size\" \"20px\")\r\n        (.text \"\"))\r\n\r\n    ;; Add click event to play audio\r\n    (.on button \"click\"\r\n         (fn [_]\r\n           ; ;;; toDo:  Brandon/Stella hidden message  ????\r\n           ;dddd show-image\r\n           (show-image images 2)  ; open eyes\r\n           (speak! \"Hay who touched my nosey! Is that Stella or Brandon?\")\r\n           (js/setTimeout (fn [] (show-image images 0)) 5000)  ; close eyes\r\n           (when-let [audio (.getElementById js/document \"blink-sound\")]\r\n            (-> (.play audio)\r\n                (.catch #(js/alert (str \"\u274c Audio play failed:\" %))))) )) )\r\n\r\n\r\n  (init-jqBlinkButton)\r\n  (init-jqTiltButton)\r\n  (init-jqxImageQuery)\r\n  (init-jqxMusicQuery)\r\n\r\n  (cycle-owl-images cached-blink-images)\r\n   (js/setTimeout (fn [] (cycle-owl-images  cached-tilt-images)) 5000)\r\n\r\n\r\n   ;=================  E N D  ==================\r\n   ;============================================\r\n\r\n    ;\r\n    ; ====== for D3 app   ======\r\n    ;   in terminal window:\r\n    ; npx shadow-cljs watch app\r\n    ; ==========================\r\n    ;\r\n    ; deps.edn is a configuration file used by Clojure's dependency and\r\n    ; project management tool, tools.deps (Clojure CLI).\r\n    ;\r\n    ; shadow-cljs is a build tool for ClojureScript\r\n    ;\r\n    ; D3.js (Data-Driven Documents) is a JavaScript library\r\n    ;\r\n    ; ipconfig   get ip address of pc\r\n    ;\r\n    ; audio file:  tawnyOwlShort.mp3\r\n    ;\r\n\r\n  ; (js/alert (str \"Device type: \" (device-type) \" size: \"(device-size) ))\r\n;;;===============================================\r\n\r\n  ) ;end init"]}